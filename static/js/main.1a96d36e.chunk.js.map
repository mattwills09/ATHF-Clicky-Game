{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","data-clicked","clicked","onClick","imageClick","character","alt","src","image","name","Wrapper","children","Title","Jumbotron","class","App","state","characters","characterBeenClicked","score","topScore","_this","setState","sort","b","Math","random","alert","this","_this2","components_Wrapper","components_Jumbotron","components_Title","map","components_CharacterCard","id","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yxEA8BeA,MA1Bf,SAAuBC,GACrB,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,eAAcL,EAAMM,QAASC,QAAS,kBAAMP,EAAMQ,WAAWR,EAAMS,aAEvFR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEbH,EAAAC,EAAAC,cAAA,OAAKO,IAAKV,EAAMU,IAAKC,IAAKX,EAAMY,SAIlCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEbH,EAAAC,EAAAC,cAAA,cAASH,EAAMa,gBCZZC,MAJf,SAAiBd,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMe,iBCM1BC,MANf,SAAehB,GAEb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMe,iBCavBE,MAff,SAAmBjB,GAEjB,OAAOC,EAAAC,EAAAC,cAAA,OAAKe,MAAM,mDACRjB,EAAAC,EAAAC,cAAA,OAAKe,MAAM,aACTjB,EAAAC,EAAAC,cAAA,KAAGe,MAAM,MAAMlB,EAAMe,UACrBd,EAAAC,EAAAC,cAAA,KAAGe,MAAM,QAAT,kFAA+FjB,EAAAC,EAAAC,cAAA,WAA/F,2EC4FCgB,6MA1FXC,MAAQ,CACNC,aACAC,qBAAsB,GACtBC,MAAO,EACPC,SAAU,KAIdhB,WAAa,SAAAC,GACXgB,EAAKC,SAAS,CACZL,WAAYI,EAAKL,MAAMC,WAAWM,KAAK,SAASzB,EAAG0B,GACjD,MAAO,GAAMC,KAAKC,aAQG,GAAnBrB,EAAUH,SACZyB,MAAM,gFACNN,EAAKL,MAAMG,MAAM,IAGjBd,EAAUH,SAAQ,EAClBmB,EAAKC,SAAS,CAAEL,aAAYE,MAAME,EAAKL,MAAMG,MAAO,IAE3B,KAArBE,EAAKL,MAAMG,OACbQ,MAAM,+IAMVC,KAAKZ,MAAMG,MAAQS,KAAKZ,MAAMI,UAChCQ,KAAKN,SAAS,CAAEF,SAAUQ,KAAKZ,MAAMG,yCAOhC,IAAAU,EAAAD,KACL,OACE/B,EAAAC,EAAAC,cAAC+B,EAAD,KAEEjC,EAAAC,EAAAC,cAACgC,EAAD,4CAEAlC,EAAAC,EAAAC,cAACiC,EAAD,KACEnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,UAA+B4B,KAAKZ,MAAMG,QAG5CtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,sBAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,cAAsC4B,KAAKZ,MAAMI,aAKvDvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEZ4B,KAAKZ,MAAMC,WAAWgB,IAAI,SAAA5B,GAAS,OAElCR,EAAAC,EAAAC,cAACmC,EAAD,CACE9B,WAAYyB,EAAKzB,WACjB+B,GAAI9B,EAAU8B,GACdC,IAAK/B,EAAU8B,GACf7B,IAAKD,EAAUI,KACfA,KAAMJ,EAAUI,KAChBD,MAAOH,EAAUG,MACjBN,QAASG,EAAUH,QACnBG,UAAWA,eA7EPgC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1a96d36e.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport \"./style.css\";\n\nfunction CharacterCard(props) {\n  return (\n\n      <div className=\"col-md-3\">\n\n        <div className=\"card\" data-clicked={props.clicked} onClick={() => props.imageClick(props.character)}>\n\n          <div className=\"img-container\">\n\n            <img alt={props.alt} src={props.image} />\n\n          </div>\n\n          <div className=\"content\">\n\n            <strong>{props.name}</strong>\n\n          </div>\n\n        </div>\n\n      </div>\n\n  );\n}\n\nexport default CharacterCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","\nimport React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n\n  return <h3 className=\"title\">{props.children}</h3>;\n  \n}\n\nexport default Title;\n","\nimport React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron(props) {\n\n  return <div class=\"jumbotron jumbotron-fluid border border-primary\">\n            <div class=\"container\">\n              <p class=\"h1\">{props.children}</p>\n              <p class=\"lead\">Click on each character once to score points, if you click on all 12.. You Win!<br></br>However, if you click on the same character twice.. you lose.</p>\n            </div>\n          </div>\n\n\n\n{/* </div><h1 className=\"title\">{props.children}</h1>; */}\n  \n}\n\nexport default Jumbotron;\n","\nimport React, { Component } from \"react\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport characters from \"./characters.json\";\n// import './App.css';\n\n\nclass App extends Component {\n    state = {\n      characters,\n      characterBeenClicked: [],\n      score: 0,\n      topScore: 0\n    };\n\n//When character is clicked, regardless of win or lose, reorder characters:\n  imageClick = character => {\n    this.setState({\n      characters: this.state.characters.sort(function(a, b) {\n        return 0.5 - Math.random();\n      })\n    })\n\n    // console.log(character);\n\n//If character is clicked for second time, send lose game message & reset score,\n//Else change character 'clicked' setting to true, add 1 to user's score:\n      if (character.clicked==true) {\n        alert(\"Master Shake says: 'Too bad homeslice.. better luck next time.  Play again?'\");\n        this.state.score=0;\n\n      } else {\n        character.clicked=true;\n        this.setState({ characters, score:this.state.score +1 });\n\n        if (this.state.score === 12) {\n          alert(\"Meatwad says: 'Aw hell yeah boi.. looks like you won!\");\n        }\n      }\n  }\n\ncomponentDidUpdate() {\n  if (this.state.score > this.state.topScore) {\n    this.setState({ topScore: this.state.score });\n  } else {\n    return\n  }\n}\n\n\nrender() {\n    return (\n      <Wrapper>\n\n        <Jumbotron>Aqua Teen Hunger Force Clicky Game!</Jumbotron>\n\n        <Title>\n          <div className=\"row\">\n            <div className=\"col-md-5\">\n              <div className=\"score\">Score: {this.state.score}</div>\n            </div>\n\n            <div className=\"col-md-2\">\n              <div>  ||  </div>\n            </div>\n\n            <div className=\"col-md-5\">\n              <div className=\"topScore\">Top Score: {this.state.topScore}</div>\n            </div>\n          </div>\n        </Title>\n\n        <div className=\"row\">\n\n          {this.state.characters.map(character => (\n\n            <CharacterCard\n              imageClick={this.imageClick}\n              id={character.id}\n              key={character.id}\n              alt={character.name}\n              name={character.name}\n              image={character.image}\n              clicked={character.clicked}\n              character={character}\n            />\n\n          ))}\n\n        </div>\n\n      </Wrapper>\n    );\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}